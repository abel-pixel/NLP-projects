# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hi3ehWVrdFJ868-I38ICbn8XADU99nbV
"""

!pip install -U spacy

!pip install pyinflect

import json

import numpy as np
import pandas as pd

import spacy
import en_core_web_sm
import pyinflect

import gensim.downloader as api

# малая модель spacy
nlp = en_core_web_sm.load()

# малая модель glove wiki
# внимание - очень долго скачивает, если она еще не установлена
model = api.load("glove-wiki-gigaword-100")

# изменение степени прилагательного с помощью pyinflect
for token in nlp('Little Red Riding Hood'):
    if token.pos_=='ADJ':
        print(token.text, token._.inflect('JJS'))
        print(token.text, token._.inflect('JJR'))
        print(token.text, token._.inflect('JJ'))

# сходные слова, синонимы
model.similar_by_word('lived')

# антонимы – добавляем пару позитив-негатив с противоположными значениями
model.most_similar(positive=['lived','bad'], negative=['good'])

# фильтрация стоп слов с помощью спейси
word = 'lived'
antonyms = model.most_similar(positive=[word,'bad'], negative=['good'])
# get words from tuples
antonyms = [ _[0] for _ in antonyms]
# filter stop words
antonyms = [_.text for _ in nlp(' '.join(antonyms)) if not _.is_stop]
print('Потенциальные антонимы', word)
antonyms

# проверка similarity двух слов с помощью gensim
for ant in antonyms:
    print(ant, model.similarity('lived', ant))

# как посчитать вручную similarity
# можно взять из gensim вектор слова и посчитать косинусное расстояние
lived_vec = model['lived']
living_vec = model['living']
cosine_similarity = (lived_vec @ living_vec)/(np.linalg.norm(lived_vec)*np.linalg.norm(living_vec))
cosine_similarity

# сходные слова, синонимы
model.similar_by_word('prettiest')

# антонимы – добавляем пару позитив-негатив с противоположными значениями
model.most_similar(positive=['excessively','bad'], negative=['good'])

# сходные слова, синонимы
model.similar_by_word('excessively')

# сходные слова, синонимы
model.similar_by_word('woman')

for token in nlp('It suited the girl so extremely well that everybody called her Little Red Riding Hood'):
    if token.pos_=='VERB':
        print(token.text, token._.inflect('VB'))
        print(token.text, token._.inflect('VBZ'))
        print(token.text, token._.inflect('VBD'))

for token in nlp('One day her mother, having made some cakes, said to her, "Go, my dear, and see how your grandmother is doing, for I hear she has been very ill.'):
    if token.pos_=='NOUN':
        print(token.text, token._.inflect('NN'))
        print(token.text, token._.inflect('NNS'))

# на случайные близкие слова и анти-слова
sent = 'Take her a cake, and this little pot of butter.'
new_sent_1, new_sent_2 = sent, sent
i=5
for token in nlp(sent):
    if token.pos_ in ['VERB']:
        m, n = np.random.randint(0, i, 2)

        new_word_1 = model.most_similar(token.text.lower(), topn=i)[m][0]
        new_word_2 = model.most_similar(positive = [token.text.lower(), 'bad'],
                                        negative = ['good'],
                                        topn=i)[n][0]

        new_word_1 = new_word_1.title() if token.text.istitle() else new_word_1
        new_word_2 = new_word_2.title() if token.text.istitle() else new_word_2

        new_sent_1 = new_sent_1.replace(token.text, new_word_1)
        new_sent_2 = new_sent_2.replace(token.text, new_word_2)

print(sent)
print(new_sent_1)
print(new_sent_2)

# фильтрация стоп слов с помощью спейси
word = 'butter'
antonyms = model.most_similar(positive=[word,'bad'], negative=['good'])
# get words from tuples
antonyms = [ _[0] for _ in antonyms]
# filter stop words
antonyms = [_.text for _ in nlp(' '.join(antonyms)) if not _.is_stop]
print('Потенциальные антонимы', word)
antonyms

# проверка similarity двух слов с помощью gensim
for ant in antonyms:
    print(ant, model.similarity('butter', ant))

# фильтрация стоп слов с помощью спейси
word = 'immediately'
antonyms = model.most_similar(positive=[word,'bad'], negative=['good'])
# get words from tuples
antonyms = [ _[0] for _ in antonyms]
# filter stop words
antonyms = [_.text for _ in nlp(' '.join(antonyms)) if not _.is_stop]
print('Потенциальные антонимы', word)
antonyms

# проверка similarity двух слов с помощью gensim
for ant in antonyms:
    print(ant, model.similarity('immediately', ant))

for token in nlp('As she was going through the wood, she met with a wolf, who had a very great mind to eat her up, but he dared not, because of some woodcutters working nearby in the forest.'):
    if token.pos_=='NOUN':
        print(token.text, token._.inflect('NN'))
        print(token.text, token._.inflect('NNS'))

for token in nlp('As she was going through the wood, she met with a wolf, who had a very great mind to eat her up, but he dared not, because of some woodcutters working nearby in the forest.'):
    if token.pos_=='VERB':
        print(token.text, token._.inflect('VB'))
        print(token.text, token._.inflect('VBZ'))
        print(token.text, token._.inflect('VBD'))

for token in nlp('As she was going through the wood, she met with a wolf, who had a very great mind to eat her up, but he dared not, because of some woodcutters working nearby in the forest.'):
    if token.pos_=='ADJ':
        print(token.text, token._.inflect('JJS'))
        print(token.text, token._.inflect('JJR'))
        print(token.text, token._.inflect('JJ'))

for token in nlp('He asked her where she was going'):
    if token.pos_=='VERB':
        print(token.text, token._.inflect('VB'))
        print(token.text, token._.inflect('VBZ'))
        print(token.text, token._.inflect('VBD'))

# сходные слова, синонимы
model.similar_by_word('dangerous')

# фильтрация стоп слов с помощью спейси
word = 'carry'
antonyms = model.most_similar(positive=[word,'bad'], negative=['good'])
# get words from tuples
antonyms = [ _[0] for _ in antonyms]
# filter stop words
antonyms = [_.text for _ in nlp(' '.join(antonyms)) if not _.is_stop]
print('Потенциальные антонимы', word)
antonyms

# проверка similarity двух слов с помощью gensim
for ant in antonyms:
    print(ant, model.similarity('carry', ant))

for token in nlp('"Does she live far off?" said the wolf'):
    if token.pos_=='VERB':
        print(token.text, token._.inflect('VB'))
        print(token.text, token._.inflect('VBZ'))
        print(token.text, token._.inflect('VBD'))

for token in nlp('"Oh I say," answered Little Red Riding Hood; "it is beyond that mill you see there, at the first house in the village."'):
    if token.pos_=='ADJ':
        print(token.text, token._.inflect('JJS'))
        print(token.text, token._.inflect('JJR'))
        print(token.text, token._.inflect('JJ'))

# фильтрация стоп слов с помощью спейси
word = 'way'
antonyms = model.most_similar(positive=[word,'bad'], negative=['good'])
# get words from tuples
antonyms = [ _[0] for _ in antonyms]
# filter stop words
antonyms = [_.text for _ in nlp(' '.join(antonyms)) if not _.is_stop]
print('Потенциальные антонимы', word)
antonyms

# проверка similarity двух слов с помощью gensim
for ant in antonyms:
    print(ant, model.similarity('way', ant))

# сходные слова, синонимы
model.similar_by_word('there')

# сходные слова, синонимы
model.similar_by_word('path')

# сходные слова, синонимы
model.similar_by_word('roundabout')

# фильтрация стоп слов с помощью спейси
word = 'roundabout'
antonyms = model.most_similar(positive=[word,'bad'], negative=['good'])
# get words from tuples
antonyms = [ _[0] for _ in antonyms]
# filter stop words
antonyms = [_.text for _ in nlp(' '.join(antonyms)) if not _.is_stop]
print('Потенциальные антонимы', word)
antonyms

# проверка similarity двух слов с помощью gensim
for ant in antonyms:
    print(ant, model.similarity('roundabout', ant))

# сходные слова, синонимы
model.similar_by_word('butterflies')

# сходные слова, синонимы
model.similar_by_word('house')

for token in nlp('He knocked at the door: tap, tap.'):
    if token.pos_=='VERB':
        print(token.text, token._.inflect('VB'))
        print(token.text, token._.inflect('VBZ'))
        print(token.text, token._.inflect('VBD'))

# сходные слова, синонимы
model.similar_by_word('there')

# сходные слова, синонимы
model.similar_by_word('counterfeiting')

# сходные слова, синонимы
model.similar_by_word('butter')

# антонимы – добавляем пару позитив-негатив с противоположными значениями
model.most_similar(positive=['good','bad'], negative=['good'])

# сходные слова, синонимы
model.similar_by_word('good')

# сходные слова, синонимы
model.similar_by_word('bobbin')

# сходные слова, синонимы
model.similar_by_word('pulled')

# сходные слова, синонимы
model.similar_by_word('moment')

# сходные слова, синонимы
model.similar_by_word('door')

# сходные слова, синонимы
model.similar_by_word('expecting')

# сходные слова, синонимы
model.similar_by_word('hearing')

# фильтрация стоп слов с помощью спейси
word = 'believing'
antonyms = model.most_similar(positive=[word,'bad'], negative=['good'])
# get words from tuples
antonyms = [ _[0] for _ in antonyms]
# filter stop words
antonyms = [_.text for _ in nlp(' '.join(antonyms)) if not _.is_stop]
print('Потенциальные антонимы', word)
antonyms

# проверка similarity двух слов с помощью gensim
for ant in antonyms:
    print(ant, model.similarity('believing', ant))

# сходные слова, синонимы
model.similar_by_word('grandchild')

# сходные слова, синонимы
model.similar_by_word('softening')

# сходные слова, синонимы
model.similar_by_word('latch')

# на случайные близкие слова и анти-слова
noun = "Little Red Riding Hood pulled the bobbin, and the door opened."
new_noun_1, new_noun_2 = noun, noun
i=5
for token in nlp(noun):
    if token.pos_ in ['NOUN', 'VERB', 'ADV', 'ADJ']:
        m, n = np.random.randint(0, i, 2)

        new_word_1 = model.most_similar(token.text.lower(), topn=i)[m][0]
        new_word_2 = model.most_similar(positive = [token.text.lower(), 'bad'],
                                        negative = ['good'],
                                        topn=i)[n][0]

        new_word_1 = new_word_1.title() if token.text.istitle() else new_word_1
        new_word_2 = new_word_2.title() if token.text.istitle() else new_word_2

        new_noun_1 = new_noun_1.replace(token.text, new_word_1)
        new_noun_2 = new_noun_2.replace(token.text, new_word_2)

print(noun)
print(new_noun_1)
print(new_noun_2)

for token in nlp('Little Red Riding Hood pulled the bobbin, and the door opened.'):
    if token.pos_=='VERB':
        print(token.text, token._.inflect('VB'))
        print(token.text, token._.inflect('VBZ'))
        print(token.text, token._.inflect('VBD'))

# сходные слова, синонимы
model.similar_by_word('seeing')

# сходные слова, синонимы
model.similar_by_word('bedclothes')

# на случайные близкие слова и анти-слова
noun = "Little Red Riding Hood took off her clothes and got into bed."
new_noun_1, new_noun_2 = noun, noun
i=5
for token in nlp(noun):
    if token.pos_ in ['NOUN', 'VERB', 'ADV', 'ADJ']:
        m, n = np.random.randint(0, i, 2)

        new_word_1 = model.most_similar(token.text.lower(), topn=i)[m][0]
        new_word_2 = model.most_similar(positive = [token.text.lower(), 'bad'],
                                        negative = ['good'],
                                        topn=i)[n][0]

        new_word_1 = new_word_1.title() if token.text.istitle() else new_word_1
        new_word_2 = new_word_2.title() if token.text.istitle() else new_word_2

        new_noun_1 = new_noun_1.replace(token.text, new_word_1)
        new_noun_2 = new_noun_2.replace(token.text, new_word_2)

print(noun)
print(new_noun_1)
print(new_noun_2)

# сходные слова, синонимы
model.similar_by_word('bed')

# сходные слова, синонимы
model.similar_by_word('amazed')

# сходные слова, синонимы
model.similar_by_word('arms')

# на случайные близкие слова и анти-слова
noun = "All the better to hug you with, my dear."
new_noun_1, new_noun_2 = noun, noun
i=5
for token in nlp(noun):
    if token.pos_ in ['NOUN', 'VERB', 'ADV', 'ADJ']:
        m, n = np.random.randint(0, i, 2)

        new_word_1 = model.most_similar(token.text.lower(), topn=i)[m][0]
        new_word_2 = model.most_similar(positive = [token.text.lower(), 'bad'],
                                        negative = ['good'],
                                        topn=i)[n][0]

        new_word_1 = new_word_1.title() if token.text.istitle() else new_word_1
        new_word_2 = new_word_2.title() if token.text.istitle() else new_word_2

        new_noun_1 = new_noun_1.replace(token.text, new_word_1)
        new_noun_2 = new_noun_2.replace(token.text, new_word_2)

print(noun)
print(new_noun_1)
print(new_noun_2)

for token in nlp('All the better to hug you with, my dear.'):
    if token.pos_=='ADJ':
        print(token.text, token._.inflect('JJS'))
        print(token.text, token._.inflect('JJR'))
        print(token.text, token._.inflect('JJ'))
        print(token.text, token._.inflect('NNS'))

# сходные слова, синонимы
model.similar_by_word('legs')

for token in nlp('All the better to run with, my child.'):
    if token.pos_=='VERB':
        print(token.text, token._.inflect('VB'))
        print(token.text, token._.inflect('VBZ'))
        print(token.text, token._.inflect('VBD'))

# сходные слова, синонимы
model.similar_by_word('run')

# сходные слова, синонимы
model.similar_by_word('ears')

# на случайные близкие слова и анти-слова
noun = "All the better to hug you with, my dear."
new_noun_1, new_noun_2 = noun, noun
i=5
for token in nlp(noun):
    if token.pos_ in ['NOUN', 'VERB', 'ADV', 'ADJ']:
        m, n = np.random.randint(0, i, 2)

        new_word_1 = model.most_similar(token.text.lower(), topn=i)[m][0]
        new_word_2 = model.most_similar(positive = [token.text.lower(), 'bad'],
                                        negative = ['good'],
                                        topn=i)[n][0]

        new_word_1 = new_word_1.title() if token.text.istitle() else new_word_1
        new_word_2 = new_word_2.title() if token.text.istitle() else new_word_2

        new_noun_1 = new_noun_1.replace(token.text, new_word_1)
        new_noun_2 = new_noun_2.replace(token.text, new_word_2)

print(noun)
print(new_noun_1)
print(new_noun_2)

# сходные слова, синонимы
model.similar_by_word('child')

# на случайные близкие слова и анти-слова
noun = "Grandmother, what big eyes you have!"
new_noun_1, new_noun_2 = noun, noun
i=5
for token in nlp(noun):
    if token.pos_ in ['NOUN', 'VERB', 'ADV', 'ADJ']:
        m, n = np.random.randint(0, i, 2)

        new_word_1 = model.most_similar(token.text.lower(), topn=i)[m][0]
        new_word_2 = model.most_similar(positive = [token.text.lower(), 'bad'],
                                        negative = ['good'],
                                        topn=i)[n][0]

        new_word_1 = new_word_1.title() if token.text.istitle() else new_word_1
        new_word_2 = new_word_2.title() if token.text.istitle() else new_word_2

        new_noun_1 = new_noun_1.replace(token.text, new_word_1)
        new_noun_2 = new_noun_2.replace(token.text, new_word_2)

print(noun)
print(new_noun_1)
print(new_noun_2)

for token in nlp('Grandmother, what big eyes you have!'):
    if token.pos_=='VERB':
        print(token.text, token._.inflect('VB'))
        print(token.text, token._.inflect('VBZ'))
        print(token.text, token._.inflect('VBD'))

# сходные слова, синонимы
model.similar_by_word('with')

# сходные слова, синонимы
model.similar_by_word('teeth')

# на случайные близкие слова и анти-слова
noun = "All the better to eat you up with."
new_noun_1, new_noun_2 = noun, noun
i=5
for token in nlp(noun):
    if token.pos_ in ['NOUN', 'VERB', 'ADV', 'ADJ']:
        m, n = np.random.randint(0, i, 2)

        new_word_1 = model.most_similar(token.text.lower(), topn=i)[m][0]
        new_word_2 = model.most_similar(positive = [token.text.lower(), 'bad'],
                                        negative = ['good'],
                                        topn=i)[n][0]

        new_word_1 = new_word_1.title() if token.text.istitle() else new_word_1
        new_word_2 = new_word_2.title() if token.text.istitle() else new_word_2

        new_noun_1 = new_noun_1.replace(token.text, new_word_1)
        new_noun_2 = new_noun_2.replace(token.text, new_word_2)

print(noun)
print(new_noun_1)
print(new_noun_2)

# сходные слова, синонимы
model.similar_by_word('wicked')

# сходные слова, синонимы
model.similar_by_word('attractive')

# сходные слова, синонимы
model.similar_by_word('dinner')

# сходные слова, синонимы
model.similar_by_word('various')

# сходные слова, синонимы
model.similar_by_word('charming')

# сходные слова, синонимы
model.similar_by_word('streets')

# сходные слова, синонимы
model.similar_by_word('gentle')